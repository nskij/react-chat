{"version":3,"sources":["serviceWorker.js","firebase/index.js","firebase/config.js","components/Message.js","components/ChatBox.js","components/AppChat.js","index.js"],"names":["Boolean","window","location","hostname","match","firebaseDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","styles","chip","margin","wrapper","display","flexWrap","Message","react_default","a","createElement","className","List_default","ListItem_default","disabled","Avatar_default","src","this","props","message","profile_image","style","marginBottom","user_name","Chip_default","text","React","Component","ChatBox","MuiThemeProvider_default","TextField_default","name","onChange","onTextChange","placeholder","rows","multiLine","RaisedButton_default","primary","label","onClick","onButtonClick","messagesRef","ref","AppChat","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","messages","map","m","i","Message_Message","key","ChatBox_ChatBox","e","target","setState","value","push","alert","_this2","on","snapshot","val","msgs","ReactDOM","render","components_AppChat","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6ccb67e.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}","import firebase from 'firebase';\nimport { firebaseConfig } from './config.js';\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\nexport const firebaseDb = firebaseApp.database();","export const firebaseConfig = {\n  apiKey: \"AIzaSyAbgrKpystYAy6PZcJYBNkL-AuhWUQKrTg\",\n  authDomain: \"react-chat-37de6.firebaseapp.com\",\n  databaseURL: \"https://react-chat-37de6.firebaseio.com\",\n  projectId: \"react-chat-37de6\",\n  storageBucket: \"react-chat-37de6.appspot.com\",\n  messagingSenderId: \"846956337342\"\n};","import React from \"react\";\n// import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Avatar from 'material-ui/Avatar';\nimport List from 'material-ui/List/List';\nimport ListItem from 'material-ui/List/ListItem';\nimport Chip from 'material-ui/Chip';\n\nconst styles = {\n  chip: {\n    margin: 4,\n  },\n  wrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n};\n\n// const style = {margintop: -5};\n\nexport default class Message extends React.Component {\n  render() {\n    return (\n      <div className=\"Message\">\n      <List>\n        <ListItem disabled=\"true\">\n          <Avatar className=\"\" src={this.props.message.profile_image} />\n          <span style={{marginBottom: -5}}>@{this.props.message.user_name}</span>\n          <div className=\"\">\n            <Chip style={styles.chip} >\n              {this.props.message.text}\n            </Chip>\n          </div>\n        </ListItem>\n      </List>\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\n\nexport default class ChatBox extends React.Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div className=\"ChatBox\">\n          <div className=\"\">\n            <TextField name='user_name' onChange={this.props.onTextChange} className=\"\"  placeholder=\"Name\" />\n<br />\n            <TextField name='profile_image' onChange={this.props.onTextChange} className=\"\" placeholder=\"Profile Image URL\" />\n          </div>\n          <TextField rows=\"4\" multiLine=\"true\" name='text' className=\"\" onChange={this.props.onTextChange} />\n          <RaisedButton primary=\"true\" label=\"Send\" className=\"\" onClick={this.props.onButtonClick} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './../css/App.css';\nimport { firebaseDb } from './../firebase/index.js'\nimport Message from './Message.js'\nimport ChatBox from './ChatBox.js'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nconst messagesRef = firebaseDb.ref('messages')\n\nclass AppChat extends Component {\n  constructor(props) {\n    super(props);\n    this.onTextChange = this.onTextChange.bind(this)\n    this.onButtonClick = this.onButtonClick.bind(this)\n    this.state = {\n      text : \"\",\n      user_name: \"\",\n      profile_image: \"\",\n      messages : []\n    }\n  }\n\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <h2>Chat</h2>\n          </div>\n          <div className=\"MessageList\">\n            {this.state.messages.map((m, i) => {\n              return <Message key={i} message={m} />\n            })}\n          </div>\n          <ChatBox onTextChange={this.onTextChange} onButtonClick={this.onButtonClick} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n\n  onTextChange(e) {\n    if(e.target.name === 'user_name') {\n      this.setState({\n        \"user_name\": e.target.value,\n      });\n    } else if (e.target.name === 'profile_image') {\n      this.setState({\n        \"profile_image\": e.target.value,\n      });\n    } else if (e.target.name === 'text') {\n      this.setState({\n        \"text\": e.target.value,\n      });\n    }\n  }\n\n  onButtonClick() {\n    if(this.state.user_name === \"\") {\n      alert('user_name empty')\n      return\n    } else if(this.state.text === \"\") {\n      alert('text empty')\n      return\n    }\n    messagesRef.push({\n      \"user_name\" : this.state.user_name,\n      \"profile_image\" : this.state.profile_image,\n      \"text\" : this.state.text,\n    })\n  }\n\n  componentWillMount() {\n    messagesRef.on('child_added', (snapshot) => {\n      const m = snapshot.val()\n      let msgs = this.state.messages\n\n      msgs.push({\n        'text' : m.text,\n        'user_name' : m.user_name,\n        'profile_image' : m.profile_image,\n      })\n\n      this.setState({\n        messages : msgs\n      });\n    })\n  }\n\n}\n\nexport default AppChat;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport { unregister } from './serviceWorker';\nimport AppChat from './components/AppChat';\n\nReactDOM.render(<AppChat />, document.getElementById('root'));\nunregister();"],"sourceRoot":""}